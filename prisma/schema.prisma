generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  Int?
  User      User?   @relation(fields: [authorId], references: [id])
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique(map: "User.email_unique")
  name  String?
  Post  Post[]
}

model users {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String    @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  is_login    Boolean?  @default(false)
  last_seen   DateTime? @db.Timestamp(6)
  token       String?
  profile_pic String?
  user_type   String?   @default("user")
  is_block    Boolean?  @default(false)
  comment     comment[]
  posts       posts[]
  story       story[]
}

model posts {
  id         Int       @id @default(autoincrement())
  posted_by  Int
  likes      Int?      @default(0)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  liked_by   Int[]
  post_url   String
  comment    comment[]
  users      users     @relation(fields: [posted_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model comment {
  id         Int       @id @default(autoincrement())
  content    String?
  comment_by Int?
  post_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [comment_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  posts      posts?    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model story {
  id          Int       @id @default(autoincrement())
  uploaded_by Int?
  createdat   DateTime? @default(now()) @db.Timestamp(6)
  seenby      Int[]
  pic_url     String?
  users       users?    @relation(fields: [uploaded_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
